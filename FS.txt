day 5 -2
The Teacher delcared the result ( marks[] ) of an exam conducted for N students. 
Roll Number of the students start from 0,1,2,...,N-1.
marks[i] indicates result of i-th student.

Initially all the students sit in a row according to thier Roll Numbers.
The Teacher requested, All the students who scored atleast one mark in the exam, 
sit together from the begining. Those who scored 0 in the exam, sit in the end, 
according to their roll number.

Your task is to return the marks of the students according to their 
new seating order.

NOTE: 
You should use only one array.
Minimize the total number of operations.


Input Format:
-------------
Line-1: An integer N, number of students
Line-2: N space separated integers, indicates marks[]

Output Format:
--------------
Print the marks after seating order changed.


Sample Input:
---------------
0 1 0 3 12

Sample Output:
----------------
[1, 3, 12, 0, 0]


solution-
n=int(input())
l=list(map(int,input().split()))
for i in range(l.count(0)):
    l.remove(0)
    l.append(0)
print(l)


DAY-5 Q-3 - PRIORITY QUEUE
Motu Patlu  are ood riends, Motu loves to eat Samosas, 
He is given N Boxes of samosas[], box-'a' has samosas[a].
He can choose two boxes having highest number of samosas each time, 
box-i and box-j, where  samosas[i] <= samosas[j].
	If samosas[i] == samosas[j] , then eat all the samosas from both boxes;
	If samosas[i] != samosas[j] , then eat all samosas from box-i, 
	and from box-j eat only samosas[i] samosas, and left with ( samosas[j]-samosas[i] ) 
	If the box becomes empty, remove the box.
	
At the end, there is at most 1 box left. Return the number of samosas left 
in that box (or 0 if there are no boxes left.)


Input Format:
-------------
N space separated integers, number of samosas[i] in box[i]

Output Format:
--------------
Print number of the samosas left at the end.


Sample Input-1:
---------------
2 7 4 1 8 1

Sample Output-1:
----------------
1

Explanation:
------------
Boxes are numbered from 0,1,2,...,N-1.

Motu selects, box-1 has 7 samosas and box-4 has 8 samosas eat 14 samosas, boxes becomes [2,4,1,1,1]
Motu selects, box-0 has 2 samosas and box-1 has 4 samosas eat 4 samosas, boxes becomes [2,1,1,1]
Motu selects, box-1 has 1 samosa and box-0 has 2 samosas eat 2 samosas, boxes becomes [1,1,1]
Motu selects, box-0 has 1 samosa and box-1 has 1 samosa eat 2 samosas, boxes becomes [1]
Finally left with 1 box, box contains 1 samosa in it.


SOLUTION--

import java.util.*;
class p{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        String s[] = sc.nextLine().split(" ");
        PriorityQueue<Integer> p = new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0;i<s.length;i++){
            p.add(Integer.parseInt(s[i]));
        }
        while(!p.isEmpty()){
            int a = p.poll();
            int b = p.poll();
            if(a != b){
                p.add(a-b);
            }
            if(p.size()==1){
                System.out.println(p.poll());
            }
        }
    }
    
}-----------------------------------------

DAY-6
You are given a string S, consist of both lowercase and uppercase alphabets.
Your task is to find out the length of the longest word W with the 
following properties:
	- The word should be the longest.
	- The word can be formed with letters of S, and you can shuffle the letters 
	as your need. You cannot use the letters more than their occurence count.
	- The word should be equal to the reverse of it.
	
NOTE: Alphabets are case sensitive
"Aa" is  not equal to "aA". The letters 'a' and 'A' are not same

Input Format:
-------------
A string S, consist of lower/uppercase letters

Output Format:
--------------
Print an integer, length of longest word W.


Sample Input-1:
---------------
abccccdd

Sample Output-1:
----------------
7

Explanation:
------------
One of the longest word can be formed is "ccdadcc", with length 7.


Sample Input-2:
---------------
AIbohPhObia

Sample Output-2:
----------------
5

Explanation:
------------
One of the longest word can be formed is "bhPhb", with length 5.


solution--

s=input()
s1=set(s)
res=0
flag=0
for i in s1:
    c=s.count(i)
    res += c//2
    if c==1:
        flag=1
print(res*2+flag)
---------------------------------------------------------

DAY - 7
Every kid enjoys getting out of the classroom and exploring, and 
school excursions are one of the finest ways to do so. 

ABC School organised a field trip for its students. Students are requested 
to form a line, and their heights are supplied to you. You need to make 
the students to stand in ascending order of their heights. 

Your task is to find out, the minimum number of students who must change 
their positions in order to make every student to stand in ascending order.

Note: When a student is selected, the student can change position in a 
possible way among all of them, and 
the other students remain in their positions.

Input Format:
-------------
Line-1: An integer N, number of the students.
Line-2: N space separated integers, heights of the students.

Output Format:
--------------
Print an integer, minimum number of moves.


Sample Input-1:
---------------
6
1 1 4 2 1 3

Sample Output-1:
----------------
3

Explanation:
------------
Initially Heights are as follows : [1,1,4,2,1,3] 
Targeted Heights are as follows : [1,1,1,2,3,4] 
On index 2: you have 4 vs 1 so you have to change the position of student. 
On index 4: you have 1 vs 3 so you have to change the position of student. 
On index 5: you have 3 vs 4 so you have to change the position of student. 


Sample Input-2:
---------------
5
5 1 4 2 3

Sample Output-2:
----------------
5

SOLUTION__________

n=int(input())
height = list(map(int,input().split(" ")))
l1=set(height)
heightcounter = {}

for i in l1:
    c=height.count(i)
    heightcounter[i] = c
    
post=1
curr=1
count=0

for i in range(len(height)):
    if heightcounter[post] == 0:
        post = post+1
        curr = post
        
    if curr == height[i]:
        heightcounter[curr] -= 1
    else:
        heightcounter[curr] -= 1
        count += 1
print(count)

-----------------
Q2 - AlphaCipher is a string formed from another string by rearranging its letters

You are given a string S.
Your task is to check, can any one of the AlphaCipher is a palindrome or not.

Input Format:
-------------
A string S

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
carrace

Sample Output-1:
----------------
true


Sample Input-2:
---------------
code

Sample Output-2:
----------------
false
 
s=input()
s1=set(s)
res=0

for i in s1:
    c = s.count(i)
    if c%2==0:
        res += c

        
if res==len(s)-1 or res==len(s):
    print(True)

else:
    print(False)

----------------------------
Q-3
intervals
-----------------------------
Day -9
Padmavathi's lucky number is 3.
She works as an accountant in a company.
She likes to know the third highest salary among all the employees.

She is given an array of salaries salary[].
Your task is to help Padmavathi to find the third highest salary (distinct).

NOTE: Salary is in lakhs per annum.

Input Format:
-------------
Line-1: An integer N, number of employees
Line-2: N space separated integers 

Output Format:
--------------
Print an integer, third highest salary.


Sample Input-1:
---------------
5
3 5 2 7 6

Sample Output-1:
----------------
5


Sample Input-2:
---------------
5
5 5 4 7 7

Sample Output-2:
----------------
4



Solution:

import java.util.*;
import java.util.Collections;
class lucky{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        HashSet<Integer> s = new HashSet<>();
        for(int i=0;i<n;i++){
            s.add(arr[i]);
        }
        List<Integer> l = new ArrayList<Integer>(s);
        Collections.sort(l);
        int x = l.size();
        System.out.println(l.get(x-3));
    }
}

---------------------------------------------------------------------------------
question-2

Narayana is given a positive number N.
His task is to find a value P such that the value of (N - P*P) is 0.
If P can be found, print "true". Otherwise print "false".

Note: 
	- do not use built-in functions/methods 
	- solve it in O(log(N)) time.
 
Input Format:
-------------
An integer N.

Output Format:
--------------
Print a boolean value.
 
 
Sample Input-1:
---------------
9
 
Sample Output-1:
----------------
true
 
 
Sample Input-2:
---------------
15
 
Sample Output-2:
----------------
false



solution:
import java.util.*;
public class Binary{
public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
    long n = sc.nextInt();
    if(n==0){
        System.out.println("false");
        System.exit(0);
        
    }
    long l=0,r=n;
    while(l<=r){
        long mid = l+(r-l)/2;
        if(mid*mid==n){
            System.out.println("true");
            System.exit(0);
        }
        else if(mid*mid>n){
            r=mid-1;
        }
        else{
            l=mid+1;
        }
    }
    System.out.println("false");
}
}


----------------------------------------
question:3

Mr Ravi is a business man, he does business monthly Q times, 
and records his PROFIT or LOSS every time in to data[][] array. 
He records the LOSS as a negative value and PROFIT as a positive value.

Your task is to help Mr Ravi to know that how many total number of times,
he was in LOSS after P months.

NOTE: The values in data[][] are in descending order both row-wise and 
column-wise as given in sample testcases.

Input Format:
-------------
Line-1: Two space separated integers, P and Q
Next P lines: Q space separated integers, data[][].   

Output Format:
--------------
Print an integer result.


Sample Input-1:
---------------
4 4
5 4 2 -2
4 3 1 -2
2 2 -1 -3
-1 -1 -2 -4

Sample Output-1: 
----------------
8

Explanation: 
------------
8 days in LOSS,since there are 8 negative values.

Sample Input-2:
---------------
4 4
8 7 1 -2
7 6 2 -3
3 -1 -2 -4
-2 -3 -4 -7
	 
Sample Output-2:
----------------
9

Explanation:
------------
9 days in LOSS,since there are 8 negative values.

Sample Input-3:
---------------
2 2
9 3
5 0

Sample Output-3:
----------------
0

solution:


import java.util.*;
public class Main
{
    public static void binary(int[][] arr){
        int c = 0;
        for(int i=0;i<arr.length;i++){
            int index = firstNegative(arr,i,0,arr[i].length-1);
            if(index != -1){
              c = c + (arr[i].length-index);
             }
        }
        System.out.println(c);
    }
    
    public static int firstNegative(int[][] grid,int rowindex,int start,int end){
        if(start == end){
            if(grid[rowindex][start] < 0){
                return start;
            }
        }
        if(end<start){
            return -1;
        }
        int mid = start+(end-start)/2;
        
        if(mid == 0 && grid[rowindex][mid] < 0){
            return mid;
        }
        if(grid[rowindex][mid] < 0 && grid[rowindex][mid-1] >= 0){
            return mid;
        }
        if(grid[rowindex][mid] < 0){
            return firstNegative(grid,rowindex,start,mid-1);
        }
        if(grid[rowindex][mid] > 0){
            return firstNegative(grid,rowindex,mid+1,end);
        }
        return -1;
    }
        
        
        
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[2];
        for(int i=0;i<2;i++)
        arr[i] = sc.nextInt();
        int p = arr[0];
        int q = arr[1];
        int c = 0;
        int mat[][] = new int[p][q];
        for(int i=0;i<p;i++){
            for(int j=0;j<q;j++){
                mat[i][j] = sc.nextInt();
            }
        }
        //int l=0; int h=mat.length-1;
        binary(mat);
                
    }
}
        
----------------------------------------------------------------------------------------
DAY-10
q1

You are given an integer N,
You need to apply the following conditions on first N natural numbers.
where 1<=k<=N.
	1. If k is divisible by 2 print Fizz
	2. If k is divisible by 3 print Buzz
	3. If k is divisible by 5 print Jazz
	4. If k is divisible by both 2 & 3 only print FizzBuzz 
	5. If k is divisible by both 3 & 5 only print BuzzJazz 
	6. If k is divisible by both 5 & 2 only print JazzFizz 
	7. If k is divisible by both 2, 3 & 5 print FizzBuzzJazz
If none of the conditions satisfied print k.


Input Format:
-------------
An integer N

Output Format:
--------------
Print the output as shown in testcase.


Sample Input-1:
---------------
10

Sample Output-1:
----------------
[1, Fizz, Buzz, Fizz, Jazz, FizzBuzz, 7, Fizz, Buzz, JazzFizz, 11, FizzBuzz, 13, Fizz, BuzzJazz]


Sample Input-2:
---------------
15

Sample Output-2:
----------------
[1, Fizz, Buzz, Fizz, Jazz, FizzBuzz, 7, Fizz, Buzz, JazzFizz, 11, FizzBuzz, 13, Fizz, BuzzJazz]


SOLUTION:
import java.util.ArrayList;
import java.util.Scanner;
class Test{
    public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    ArrayList<Object> a = new ArrayList<Object>();
    
    
    for(int i=1;i<=n;i++)
    {
        if(i%2==0 && i%3==0 && i%5==0)
          a.add("FizzBuzzJazz");
        else if(i%2==0 && i%3==0)
          a.add("FizzBuzz");
        else if(i%3==0 && i%5==0)
          a.add("BuzzJazz");
        else if(i%2==0 && i%5==0)
          a.add("JazzFizz");
        else if(i%2 == 0)
          a.add("Fizz");
        else if(i%3==0)
          a.add("Buzz");
        else if(i%5==0)
          a.add("Jazz");
        else a.add(i);
          
          
        
    }
    System.out.println(a);

}
}


QUESTION - 3

Vishal has given a task to find the successor of a given alphabet 'alp' 
in a given string str[]. The alphabets in the given string str[] are 
all lowercase letters and always in non-decreasing order.

A successor of 'alp' is the next smallest alphabet exist in the string str[],
which is greater than 'alp'. Assume that alphabets can be considered in 
cyclic fashion. For example: Successor for alp='z' in str[]="bcd" is 'b'.

Help Vishal to return the answer.

Can you solve it in O(log(n)) complexity?

Input Format:
-------------
Line-1:A string str[]
Line-2: a character represents an alphabet.
 
Output Format:
--------------
Print a character which is the successor.
 
Constraints:
 2 <= str.length<= 10^4
'alp' is a lowercase letter.

 
Sample Input-1:
---------------
adghijl
f 
Sample Output-1:
----------------
g

Sample Input-2:
---------------
abcdefghi
j

Sample Output-2:
----------------
a


SOLUTION:

import java.util.*;
class Test{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        char s[] = sc.next().toCharArray();
        char letter = sc.next().charAt(0);
        int s1 = letter;
        int l=0,h=s.length-1;
        int f = 0;
        while(l<=h){
            int m = l+(h-l)/2;
            if((int)s[m] > s1){
                h = m-1;
                f=m;
            }else{
                l=m+1;
            }
        }
        if(f==0){
            System.out.println(s[0]);
        }else{
            System.out.println(s[f]);
        }
    }
}
------------------------------------------------------------------------------

day- 13
q-1
Arjun wants to build a swimming pool, in the backyard of his farm-house.
The backyard has an empty land of size m*n. 
Some part of the backyard is used to build the swimming pool
You will be given the m*n grid values (0's and 1's). 
where 1 indicates swimming pool, and 0 indiactes empty land.

Your task to find the perimeter of the swimming pool.

Note: There is only one swimming pool.

Input Format:
-------------
Line-1: Two integers M and N, size of the backyard.
Next M lines: N space separated integers, either 0 or 1
0- represents empty land and 1- represents the swimming pool 

Output Format:
--------------
Print an integer, the perimeter of the swimming pool


Sample Input-1:
---------------	
4 4
0 1 0 0
1 1 1 0
0 1 0 0
1 1 0 0
 
Sample Output-1:
----------------
16


Sample Input-2:
---------------
1 2
1 0
 
Sample Output-2:
----------------
4

For explanation of sample test cases given refer Hint-1.


SOLUTION-

import java.util.*;
public class p{
    public static void landPerimeter(int[][] matrix){
        int res = 0;
        int row = matrix.length, col = matrix[0].length;
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(matrix[i][j]==0)
                  continue;
                  
                if(i==0 || (matrix[i-1][j]==0))
                  res++;
                  
                if(j==0 || (matrix[i][j-1]==0))
                  res++;
                  
                if(j+1==col || (matrix[i][j+1]==0))
                  res++;
                  
                if(i+1==row || (matrix[i+1][j]==0))
                   res++;     
            }
        }
        System.out.println(res);
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[2];
        for(int i=0;i<2;i++)
        arr[i] = sc.nextInt();
        int x = arr[0];
        int y = arr[1];
        int mat[][] = new int[x][y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                mat[i][j] = sc.nextInt();
            }
        }
        landPerimeter(mat);
        
    }
}
-----------------------------------------------------------------------------

Q-2
For a Movie Premiere in US, advance booking is opened,
At Quad Cinema theater, each ticket costs $25.
And issue only one ticket per head. 

People are standing in a queue to buy from Quad Cinema counter, 
and order one at a time. And they are paying with either a $25, $50, or $100 notes.

You will be given, an array of notes[], the people are carrying with them.
Your task is to issue ticket and settle the balance to each person, 
If a person given a $50 note, Issue the ticket worth $25 and settle the balance $25.

Print true, if and only if you can provide tickets and settle the balance 
for all the people in the queue. Otherwise, false.

Note: Initially you don't have any amount in hand.

Input Format:
-------------
Line-1: An integer N, number of persons
Line-2: N space separated integers, notes with the persons.

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
5
25 25 25 50 100

Sample Output-1:
----------------
true

Explanation:
-----------
- From the first three persons in queue, we take three $25 notes.
- For the fourth person in queue, we take a $50 note and give back a $25 note.
- For the last person, we take a $100 note and give back a $50 note and a $25 note.
- Since every person in the queue received the ticket and balance, the answer is true.

Sample Input-2:
---------------
5
25 25 50 50 100

Sample Output-2:
----------------
false

Explanation:
-----------
- From the first two persons in queue, we take two $25 notes.
- For the next two persons in queue, we take a $50 note and give back a $25 note.
- For the last customer, we take $100, but can't give balance of $75 back 
  because we only have two $50 notes.
- Since not every person in the queue received the ticket and balance, the answer is false.

SOLUTION---

import java.util.*;
public class P{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        int curr=0;
        boolean res=true;
        int twe = 0;
        int fif = 0;
        int hun = 0;
        for(int i=0;i<n;i++){
            if(arr[i] == 25){
               twe++;
               
            }
            else if(arr[i]==50){
                if(twe<1){
                    res=false;
                    break;
                }
                else{
                    fif++;
                    twe--;
                }
                  
            }else if(arr[i]==100){
                if(fif < 1 || twe < 1){
                    res=false;
                    break;
                }else{
                    fif--;
                    twe--;
                }
                   
            }
               
        }
        if(res==false)
          System.out.println("false");
        else
          System.out.println("true");
    }
}
______________________________________________________________________________________

There are B bags containing N gold boxes each. In each bag, N gold boxes are 
with certain weights that are arranged according to weights from smallest 
to largest arranged strictly.
Create a method in such a way that we need to return the least weight of 
gold box which is common in all the given bags. If we don’t have any 
least common weight of gold box in any bag then return -1.

Input Format:
-------------
Line-1: Two integers B and N, number of bags and number of goldboxes in each Bag.
Next B lines: N space separated integers, weights of GoldBoxes.

Output Format:
--------------
Print the least weight of gold box, if found
Print -1, if not found.


Sample Input:
---------------
5 5
1 2 3 4 5
2 3 6 7 9
1 2 3 5 8
1 3 4 6 8 
2 3 5 7 8

Sample Output:
----------------
3


SOLUTON-

import java.util.*;
public class P{
    public static int smallestCommonElement(int[][] mat){
        int m = mat.length;
        int n = mat[0].length;
        for(int j=0;j<n;j++){
            int minCommon = mat[0][j];
            int i = 1;
            for(;i<m;i++){
                if(binarySearch(mat[i],minCommon)){
                    continue;
                }else{
                    break;
                }
            }
            if(i == m){
                return minCommon;
            }
        }
        return -1;
    }
    private static boolean binarySearch(int[] nums, int target){
        int left = 0;
        int right = nums.length-1;
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] == target){
                return true;
            }else if(nums[mid] > target){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        return false;
    }
    public static void main(String[] args){
        
        Scanner sc = new Scanner(System.in);
        int arr[] = new int[2];
        
        for(int i=0;i<2;i++)
        arr[i] = sc.nextInt();
        int x = arr[0];
        int y = arr[1];
        int mat[][] = new int[x][y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                mat[i][j] = sc.nextInt();
            }
        }
        System.out.println(smallestCommonElement(mat));
    }
    
}
--------------------------------------------------